<?php

namespace backend\modules\esiap\models;

use Yii;
use common\models\Common;
use PhpOffice\PhpSpreadsheet\Spreadsheet;
use PhpOffice\PhpSpreadsheet\IOFactory;
use PhpOffice\PhpSpreadsheet\Style\Border;
use PhpOffice\PhpSpreadsheet\Style\Alignment;
use PhpOffice\PhpSpreadsheet\Style\Fill;
use PhpOffice\PhpSpreadsheet\Style\NumberFormat;


class Tbl4Excel
{
	public $model;
	public $spreadsheet;
	public $sheet;
	public $border;
	public $bold;
	public $border_thin;
	public $bgcolor;
	public $border_bold;
	public $curr_row;
	public $ploHeadStart;
	public $transferRowStart;
	public $sltRowStart;
	public $sltContentStart;
	public $sltAssessConStart;
	public $sltAssessSumStart;
	public $sltTotalContentRow;
	public $sltTotalAssessConRow;
	public $sltTotalAssessSumRow;
	
	public function generateExcel(){
		$this->start();
		$this->setColumWidth();
		$this->item1Name();
		$this->item2Synopsis();
		$this->item3Staff();
		$this->item4SemYear();
		$this-> item5Credit();
		$this->item6Preq();
		$this->item7Clo();
		$this->item8PloHead1();
		$this->item8PloHead2();
		$this->item8PloHead3n4();
		$this->item8PloFooter();
		$this->item9Transferable();
		$this->item10Slt();
		$this->item10SltCourseContent();
		$this->item10ContentFooter();
		$this->item10SltAssessConHead();
		$this->item10SltAssessConFooter();
		$this->item10SltAssessSumHead();
		$this->item10SltAssessSumFooter();
		$this->item11Requirement();
		$this->item12Reference();
		$this->item13Other();
		$this->generate();
	}
	
	public function start(){
		$this->spreadsheet = new Spreadsheet();
		$this->spreadsheet->getProperties()->setCreator('eSIAP')
			->setLastModifiedBy('eSIAP')
			->setTitle('TABLE 4 ' . $this->model->course->course_code . ' ' . $this->model->course->course_name)
			->setSubject('TABLE 4 ' . $this->model->course->course_code . ' ' . $this->model->course->course_name)
			->setDescription('TABLE 4 Generated by eSIAP Module')
			->setKeywords('TABLE 4 MAQF 2.0 Generated by eSIAP Module Skyhint Design');
			
		$this->sheet = $this->spreadsheet->getActiveSheet();
		
		 $this->sheet
			->getStyle('A1:Z100')->getFill()
			->setFillType(Fill::FILL_SOLID)
			->getStartColor()->setARGB('FFFFFFFF'); 
			
		$this->sheet->getSheetView()->setZoomScale(90);
		
		
		$this->border = array(
				'font'  => array(
					'bold'  => false,
					//'color' => array('rgb' => 'FF0000'),
					'size'  => 11,
					'name'  => 'Calibri'
					),
				'borders' => array(
					'outline' => array(
						'borderStyle' => Border::BORDER_MEDIUM,
					),
				),
			);
		$this->bold = array(
				'font'  => array(
					'bold'  => true,
					//'color' => array('rgb' => 'FF0000'),
					'size'  => 11,
					'name'  => 'Calibri'
					),
			);
		$this->border_thin = array(
				'font'  => array(
					//'bold'  => true,
					//'color' => array('rgb' => 'FF0000'),
					'size'  => 8,
					'name'  => 'Calibri'
					),
				'borders' => array(
					'outline' => array(
						'borderStyle' => Border::BORDER_THIN,
					),
				),
			);
			
		$this->border_bold = array(
				'font'  => array(
					'bold'  => true,
					//'color' => array('rgb' => 'FF0000'),
					'size'  => 11,
					'name'  => 'Calibri'
					),
				'borders' => array(
					'outline' => array(
						'borderStyle' => Border::BORDER_MEDIUM,
					),
				),
			);
		
		$this->bgcolor = 'FFD9D9D9';
	}
	
	public function setColumWidth(){
		$normal = 10.2;//9.43
		$this->sheet->getColumnDimension('A')->setWidth(1.57);
		$this->sheet->getColumnDimension('B')->setWidth(3.71);
		$this->sheet->getColumnDimension('C')->setWidth(24.29);
		$this->sheet->getColumnDimension('D')->setWidth($normal);
		$this->sheet->getColumnDimension('E')->setWidth($normal);
		$this->sheet->getColumnDimension('F')->setWidth($normal);
		$this->sheet->getColumnDimension('G')->setWidth($normal);
		$this->sheet->getColumnDimension('H')->setWidth($normal);
		$this->sheet->getColumnDimension('I')->setWidth($normal);
		$this->sheet->getColumnDimension('J')->setWidth(11.43);
		$this->sheet->getColumnDimension('K')->setWidth($normal);
		$this->sheet->getColumnDimension('L')->setWidth($normal);
		$this->sheet->getColumnDimension('M')->setWidth($normal);
		$this->sheet->getColumnDimension('N')->setWidth($normal);
		$this->sheet->getColumnDimension('O')->setWidth($normal);
		$this->sheet->getColumnDimension('P')->setWidth(17.43);
		$this->sheet->getColumnDimension('Q')->setWidth(17.43);
	}
	
	public function item1Name(){
		//ROW HEIGHT
		$this->sheet->getRowDimension('4')->setRowHeight(24);
		$this->sheet->getRowDimension('5')->setRowHeight(24);
		
		//MERGE
		$this->sheet->mergeCells('B4:B5');
		$this->sheet->mergeCells('D4:Q4');
		$this->sheet->mergeCells('D5:Q5');
		
		//BORDER
		$this->sheet->getStyle('C4')->applyFromArray($this->border);
		$this->sheet->getStyle('C5')->applyFromArray($this->border);
		$this->sheet->getStyle('D4:Q4')->applyFromArray($this->border);
		$this->sheet->getStyle('D5:Q5')->applyFromArray($this->border);

		//ALIGNMENT
		$this->sheet->getStyle('C4:C5')
		->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
		
		$this->sheet->getStyle('B4:B5')->applyFromArray($this->border)
		->getAlignment()->setVertical(Alignment::VERTICAL_TOP)
		->setWrapText(true);
		
		$this->sheet->getStyle('D4:D5')->applyFromArray($this->border)
		->getAlignment()->setVertical(Alignment::VERTICAL_TOP)
		->setWrapText(true);
		
		//STYLE
		//$this->sheet->getStyle('B4')->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_TEXT);
		
		$this->sheet
			->getStyle('B4:C5')->getFill()
			->setFillType(Fill::FILL_SOLID)
			->getStartColor()->setARGB($this->bgcolor);
			
			
		//CONTENT
		$this->sheet
			->setCellValue('B4', '1. ')
			->setCellValue('C4', 'Name of Course :')
			->setCellValue('C5', 'Course Code :')
			->setCellValue('D4', $this->model->course->course_code)
			->setCellValue('D5', $this->model->course->course_name_bi);
	}
	
	public function item2Synopsis(){
		//ROW HEIGHT
		$this->sheet->getRowDimension('6')->setRowHeight(24);
		$this->sheet->getRowDimension('7')->setRowHeight(24);
		$this->sheet->getRowDimension('8')->setRowHeight(24);
		
		//MERGE
		$this->sheet->mergeCells('B6:B8');
		$this->sheet->mergeCells('C6:C8');
		$this->sheet->mergeCells('D6:Q8');
		
		//BORDER
		$this->sheet->getStyle('B6:B8')->applyFromArray($this->border);
		$this->sheet->getStyle('C6:C8')->applyFromArray($this->border);
		$this->sheet->getStyle('D6:Q8')->applyFromArray($this->border);

		//ALIGNMENT
		$this->sheet->getStyle('B6:Q8')
		->getAlignment()->setVertical(Alignment::VERTICAL_TOP)
		->setWrapText(true);
		
		//STYLE
		
		$this->sheet
			->getStyle('B6:C8')->getFill()
			->setFillType(Fill::FILL_SOLID)
			->getStartColor()->setARGB($this->bgcolor);
			
			
		//CONTENT
		$this->sheet
			->setCellValue('B6', '2. ')
			->setCellValue('C6', 'Synopsis :')
			->setCellValue('D6', $this->model->profile->synopsis_bi);
	}
	
	public function item3Staff(){
		//ROW HEIGHT
		$this->sheet->getRowDimension('9')->setRowHeight(72);
		
		//MERGE
		$this->sheet->mergeCells('D9:Q9');
		
		//BORDER
		$this->sheet->getStyle('B9')->applyFromArray($this->border);
		$this->sheet->getStyle('C9')->applyFromArray($this->border);
		$this->sheet->getStyle('D9:Q9')->applyFromArray($this->border);

		//ALIGNMENT
		$this->sheet->getStyle('B9:Q9')
		->getAlignment()->setVertical(Alignment::VERTICAL_TOP)
		->setWrapText(true);
		
		//STYLE
		
		$this->sheet
			->getStyle('B9:C9')->getFill()
			->setFillType(Fill::FILL_SOLID)
			->getStartColor()->setARGB($this->bgcolor);
			
			
		//CONTENT
		$str = '';
		$staff = $this->model->profile->academicStaff;
		if($staff){
			foreach($staff as $st){
				$str .= $st->staff->niceName . "\n";
			}
		}

		$this->sheet
			->setCellValue('B9', '3. ')
			->setCellValue('C9', 'Name(s) of academic staff :')
			->setCellValue('D9', $str);
	}
	
	public function item4SemYear(){
		//ROW HEIGHT
		$this->sheet->getRowDimension('10')->setRowHeight(24);
		
		//MERGE
		$this->sheet->mergeCells('D10:G10');
		$this->sheet->mergeCells('K10:Q10');
		
		//BORDER
		$this->sheet->getStyle('B10')->applyFromArray($this->border);
		$this->sheet->getStyle('C10')->applyFromArray($this->border);
		$this->sheet->getStyle('D10:G10')->applyFromArray($this->border);
		$this->sheet->getStyle('H10')->applyFromArray($this->border);
		$this->sheet->getStyle('I10')->applyFromArray($this->border);
		$this->sheet->getStyle('J10')->applyFromArray($this->border);
		$this->sheet->getStyle('K10:Q10')->applyFromArray($this->border);

		//ALIGNMENT
		$this->sheet->getStyle('B10:C10')
		->getAlignment()->setVertical(Alignment::VERTICAL_TOP)
		->setWrapText(true);
		
		
		
		$this->sheet->getStyle('D10:Q10')
		->getAlignment()->setVertical(Alignment::VERTICAL_CENTER)
		->setWrapText(true);
		
		
		$this->sheet->getStyle('D10:H10')
		->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER)
		->setWrapText(true);
		
		$this->sheet->getStyle('I10')
		->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
		
		$this->sheet->getStyle('J10')
		->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER)
		->setWrapText(true);
		
		
		//STYLE
		
		$this->sheet
			->getStyle('B10:G10')->getFill()
			->setFillType(Fill::FILL_SOLID)
			->getStartColor()->setARGB($this->bgcolor);
		
		$this->sheet
			->getStyle('I10')->getFill()
			->setFillType(Fill::FILL_SOLID)
			->getStartColor()->setARGB($this->bgcolor);
		
		$this->sheet
			->getStyle('K10:Q10')->getFill()
			->setFillType(Fill::FILL_SOLID)
			->getStartColor()->setARGB('FF000000');
			
		$offer_sem = $this->model->profile->offer_sem;
		if($offer_sem == 0){
			$offer_sem = '';
		}
		$offer_year = $this->model->profile->offer_year;
		if($offer_year == 0){
			$offer_year = '';
		}

		$this->sheet
			->setCellValue('B10', '4. ')
			->setCellValue('C10', 'Semester and Year offered :')
			->setCellValue('D10', 'Semester')
			->setCellValue('H10', $offer_sem)
			->setCellValue('I10', 'Year')
			->setCellValue('J10', $offer_year)
			;
	}
	
	public function item5Credit(){
		//ROW HEIGHT
		$this->sheet->getRowDimension('11')->setRowHeight(24);
		
		//MERGE
		$this->sheet->mergeCells('D11:Q11');
		
		//BORDER
		$this->sheet->getStyle('B11')->applyFromArray($this->border);
		$this->sheet->getStyle('C11')->applyFromArray($this->border);
		$this->sheet->getStyle('D11:Q11')->applyFromArray($this->border);

		//ALIGNMENT
		$this->sheet->getStyle('B11:Q11')
		->getAlignment()->setVertical(Alignment::VERTICAL_TOP)
		->setWrapText(true);
		$this->sheet->getStyle('D11')
		->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
		
		//STYLE
		
		$this->sheet
			->getStyle('B11:C11')->getFill()
			->setFillType(Fill::FILL_SOLID)
			->getStartColor()->setARGB($this->bgcolor);
			
			
		//CONTENT

		$this->sheet
			->setCellValue('B11', '5. ')
			->setCellValue('C11', 'Credit Value :')
			->setCellValue('D11', $this->model->course->credit_hour);
	}
	
	public function item6Preq(){
		//ROW HEIGHT
		$this->sheet->getRowDimension('12')->setRowHeight(40);
		
		//MERGE
		$this->sheet->mergeCells('D12:Q12');
		
		//BORDER
		$this->sheet->getStyle('B12')->applyFromArray($this->border);
		$this->sheet->getStyle('C12')->applyFromArray($this->border);
		$this->sheet->getStyle('D12:Q12')->applyFromArray($this->border);

		//ALIGNMENT
		$this->sheet->getStyle('B12')
		->getAlignment()->setVertical(Alignment::VERTICAL_TOP)
		->setWrapText(true);
		$this->sheet->getStyle('C12')
		->getAlignment()->setVertical(Alignment::VERTICAL_CENTER)
		->setWrapText(true);
		
		
		$this->sheet->getStyle('D12')
		->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
		$this->sheet->getStyle('D12')
		->getAlignment()->setVertical(Alignment::VERTICAL_TOP)
		->setWrapText(true);
		
		//STYLE
		
		$this->sheet
			->getStyle('B12:C12')->getFill()
			->setFillType(Fill::FILL_SOLID)
			->getStartColor()->setARGB($this->bgcolor);
			
			
		//CONTENT
		
		$pre = $this->model->profile->coursePrerequisite;

		$this->sheet
			->setCellValue('B12', '6. ')
			->setCellValue('C12', 'Prerequisite/co-requisite:     (if any) ')
			->setCellValue('D12', $pre[1]);
			
		
	}
	
	public function item7Clo(){
		//ROW HEIGHT
		$this->sheet->getRowDimension('13')->setRowHeight(40);
		
		//MERGE
		$this->sheet->mergeCells('C13:Q13');
		
		//BORDER
		$this->sheet->getStyle('B13')->applyFromArray($this->border);
		$this->sheet->getStyle('C13:Q13')->applyFromArray($this->border);

		//ALIGNMENT
		$this->sheet->getStyle('B13:Q13')
		->getAlignment()->setVertical(Alignment::VERTICAL_TOP)
		->setWrapText(true);
		

		
		//STYLE
		
		$this->sheet
			->getStyle('B13:Q13')->getFill()
			->setFillType(Fill::FILL_SOLID)
			->getStartColor()->setARGB($this->bgcolor);
			
			
		//CONTENT
		
		$pre = $this->model->profile->coursePrerequisite;

		$this->sheet
			->setCellValue('B13', '7. ')
			->setCellValue('C13' , 'Course Learning Outcomes (CLO) :  At the end of the course the students will be able to: (example)
                                                                -  explain the basic principles of immunisation (C2,PLO1)');
		
		if($this->model->clos){
			$row = 14;
			$i = 1;
			foreach($this->model->clos as $clo){
				$text = $clo->clo_text_bi .' '.$clo->taxoPloBracket;
				$this->item7CloText($row, $i, $text);
			$i++;
			$row++;
			}
			$this->curr_row = $row;
		}else{
			$this->item7CloText(14, 1, '');
			$this->curr_row = 15;
		}
		
			
			//$this->item7CloText(15, 2);
			//$this->item7CloText(16, 3);
		
	}
	
	public function item7CloText($row, $clonumber, $text){
		//ROW HEIGHT
		$this->sheet->getRowDimension($row)->setRowHeight(47.25);
		
		//MERGE
		$this->sheet->mergeCells('D'.$row.':Q'.$row.'');
		$this->sheet->mergeCells('B13:B'.$row.'');
		
		//BORDER
		$this->sheet->getStyle('B13:B'.$row)->applyFromArray($this->border);
		$this->sheet->getStyle('C'.$row.'')->applyFromArray($this->border);
		$this->sheet->getStyle('D'.$row.':Q'.$row.'')->applyFromArray($this->border);

		//ALIGNMENT
		$this->sheet->getStyle('B'.$row.'')
		->getAlignment()->setVertical(Alignment::VERTICAL_TOP)
		->setWrapText(true);
		$this->sheet->getStyle('D'.$row.'')
		->getAlignment()->setVertical(Alignment::VERTICAL_TOP)
		->setWrapText(true);
		
		$this->sheet->getStyle('C'.$row.'')
		->getAlignment()->setVertical(Alignment::VERTICAL_CENTER)
		->setWrapText(true);
		//STYLE
		
		$this->sheet
			->getStyle('B'.$row.':C'.$row.'')->getFill()
			->setFillType(Fill::FILL_SOLID)
			->getStartColor()->setARGB($this->bgcolor);
			
			
		//CONTENT
		

		$this->sheet
			->setCellValue('C'.$row , 'CLO' . $clonumber)
			->setCellValue('D'.$row , strip_tags($text));
	}
	
	public function item8PloHead1(){
		//ROW HEIGHT
		$this->ploHeadStart = $this->curr_row;
		
		$this->sheet->getRowDimension($this->curr_row)->setRowHeight(24);
		$next_row = $this->curr_row + 1;
		$this->sheet->getRowDimension($next_row)->setRowHeight(24);
		
		//MERGE
		$this->sheet->mergeCells('B'.$this->curr_row .':B' . $next_row);
		$this->sheet->mergeCells('C'.$this->curr_row .':Q' . $next_row);
		
		//BORDER
		$this->sheet->getStyle('B'.$this->curr_row .':B' . $next_row)->applyFromArray($this->border);
		$this->sheet->getStyle('C'.$this->curr_row .':Q' . $next_row)->applyFromArray($this->border);

		//ALIGNMENT
		$this->sheet->getStyle('B'.$this->curr_row .':Q' . $next_row)
		->getAlignment()->setVertical(Alignment::VERTICAL_TOP)
		->setWrapText(true);
		

		
		//STYLE
		
		$this->sheet
			->getStyle('B'.$this->curr_row .':Q' . $next_row)->getFill()
			->setFillType(Fill::FILL_SOLID)
			->getStartColor()->setARGB($this->bgcolor);
			
			
		//CONTENT


		$this->sheet
			->setCellValue('B' . $this->curr_row, '8. ')
			->setCellValue('C' . $this->curr_row , 'Mapping of the Course Learning Outcomes to the Programme Learning Outcomes, Teaching Methods and Assessment :
Please select the Learning Outcome Domain (LOD) for each PLO in the cells above it. E.g. PLO1 - Knowledge, PLO2 - Cognitive, PLO3 - Practical Skills');
		
		
		
	}
	
	public function item8PloHead2(){
		//ROW HEIGHT
		
		$curr_row = $this->curr_row + 2;
		
		$this->sheet->getRowDimension($curr_row)->setRowHeight(24);
		
		//MERGE
		$this->sheet->mergeCells('B'.$this->ploHeadStart .':B' . $curr_row);
		$this->sheet->mergeCells('D'.$curr_row .':O' . $curr_row);
		
		//BORDER
		$this->sheet->getStyle('B'.$this->ploHeadStart .':B' . $curr_row)->applyFromArray($this->border);
		$this->sheet->getStyle('C'.$curr_row)->applyFromArray($this->border);
		$this->sheet->getStyle('D'.$curr_row .':O' . $curr_row)->applyFromArray($this->border);
		$this->sheet->getStyle('O'.$curr_row)->applyFromArray($this->border);
		$this->sheet->getStyle('P'.$curr_row)->applyFromArray($this->border);
		$this->sheet->getStyle('B'.$curr_row .':Q' . $curr_row)->applyFromArray($this->border_bold);

		//ALIGNMENT
		$this->sheet->getStyle('C'.$curr_row .':Q' . $curr_row)
		->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER)
		->setWrapText(true);
		$this->sheet->getStyle('C'.$curr_row .':Q' . $curr_row)
		->getAlignment()->setVertical(Alignment::VERTICAL_CENTER)
		->setWrapText(true);
		

		
		//BACKGROUND
		
		$this->sheet
			->getStyle('B'.$curr_row .':Q' . $curr_row)->getFill()
			->setFillType(Fill::FILL_SOLID)
			->getStartColor()->setARGB($this->bgcolor);
			
			
		//CONTENT

		$this->sheet
			->setCellValue('C' . $curr_row , 'Course Learning Outcomes (CLO)')
			->setCellValue('D' . $curr_row , 'Programme Learning Outcomes (PLO)')
			->setCellValue('P' . $curr_row , 'Learning and Teaching Method')
			->setCellValue('Q' . $curr_row , 'Assessment Method')
			;
		$this->curr_row = $curr_row + 1;
	}
	
	public function item8PloHead3n4(){
		//ROW HEIGHT
		
		$curr_row = $this->curr_row;
		$clo_start = $curr_row - 1;
		$next_row = $curr_row + 1;
		
		$this->sheet->getRowDimension($curr_row)->setRowHeight(48);
		$this->sheet->getRowDimension($next_row)->setRowHeight(24);
		
		//MERGE
		$this->sheet->mergeCells('B'.$this->ploHeadStart .':B' . $next_row);
		$this->sheet->mergeCells('C'.$clo_start .':C' . $next_row);
		$this->sheet->mergeCells('P'.$clo_start .':P' . $next_row);
		$this->sheet->mergeCells('Q'.$clo_start .':Q' . $next_row);
		
		//BORDER
		$this->sheet->getStyle('B'.$this->ploHeadStart .':B' . $next_row)->applyFromArray($this->border);
		$this->sheet->getStyle('C'.$clo_start .':C' . $next_row)->applyFromArray($this->border);
		$this->sheet->getStyle('P'.$clo_start .':P' . $next_row)->applyFromArray($this->border);
		$this->sheet->getStyle('Q'.$clo_start .':Q' . $next_row)->applyFromArray($this->border);
		//4
		
		$vert = $this->model->versionType;
		for($i=1;$i<=12;$i++){
			$col = $i + 3;
			$col = $this->abc($col);
			$this->sheet->getStyle($col . $curr_row)->applyFromArray($this->border_thin);
			
			//set content
			$pattr = 'plo' .$i. '_bi';
			$this->sheet->setCellValue($col . $curr_row , $vert->{$pattr});
			
			$this->sheet->setCellValue($col . $next_row , 'PLO'. $i);
			$this->sheet->getStyle($col . $next_row)->applyFromArray($this->border_bold);
			
		}
	

		//ALIGNMENT
		$this->sheet->getStyle('C'.$curr_row .':Q' . $next_row)
		->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER)
		->setWrapText(true);
		$this->sheet->getStyle('C'.$curr_row .':Q' . $next_row)
		->getAlignment()->setVertical(Alignment::VERTICAL_CENTER)
		->setWrapText(true);
		

		
		//BACKGROUND
		
		$this->sheet
			->getStyle('B'.$curr_row .':C' . $next_row)->getFill()
			->setFillType(Fill::FILL_SOLID)
			->getStartColor()->setARGB($this->bgcolor);
		$this->sheet
			->getStyle('P'.$curr_row .':Q' . $next_row)->getFill()
			->setFillType(Fill::FILL_SOLID)
			->getStartColor()->setARGB($this->bgcolor);
			
			
		//CONTENT
		$this->curr_row = $next_row + 1;
		
		if($this->model->clos){
			$row = 14;
			$i = 1;
			foreach($this->model->clos as $clo){
				$this->item8PloClo($i, $clo);
			$i++;
			$row++;
			}
		}else{
			$this->item8PloClo(1);
		}
		
		
	}
	
	public function item8PloClo($clonumber, $clo = null){
		//ROW HEIGHT
		
		$curr_row = $this->curr_row;

		
		$this->sheet->getRowDimension($curr_row)->setRowHeight(24);
		
		//MERGE
		$this->sheet->mergeCells('B'.$this->ploHeadStart .':B' . $curr_row);
		
		//BORDER
		$this->sheet->getStyle('B'.$this->ploHeadStart .':B' . $curr_row)->applyFromArray($this->border);
		$this->sheet->getStyle('C' . $curr_row)->applyFromArray($this->border_bold);
		$this->sheet->getStyle('P' . $curr_row)->applyFromArray($this->border);
		$this->sheet->getStyle('Q'. $curr_row )->applyFromArray($this->border);
		//4
		
		for($i=1;$i<=12;$i++){
			$tick = '';
			if($clo){
				$plo_str = 'PLO'.$i;
				if($clo->{$plo_str} == 1){
					$tick = '√';
				}
			}
			
			$col = $i + 3;
			$col = $this->abc($col);
			$this->sheet->setCellValue($col . $curr_row , $tick);
			$this->sheet->getStyle($col . $curr_row)->applyFromArray($this->border);
			
		}
	

		//ALIGNMENT
		$this->sheet->getStyle('D'.$curr_row .':O' . $curr_row)
		->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER)
		->setWrapText(true);
		$this->sheet->getStyle('C'.$curr_row .':O' . $curr_row)
		->getAlignment()->setVertical(Alignment::VERTICAL_CENTER)
		->setWrapText(true);
		
		$this->sheet->getStyle('P'.$curr_row .':Q' . $curr_row)
		->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT)
		->setWrapText(true);
		$this->sheet->getStyle('P'.$curr_row .':Q' . $curr_row)
		->getAlignment()->setVertical(Alignment::VERTICAL_TOP)
		->setWrapText(true);
		

		
		//BACKGROUND
		
		$this->sheet
			->getStyle('B'.$curr_row .':C' . $curr_row)->getFill()
			->setFillType(Fill::FILL_SOLID)
			->getStartColor()->setARGB($this->bgcolor);
			
			
		//CONTENT
		
		$this->sheet
			->setCellValue('C' . $curr_row , 'CLO' . $clonumber)
			;
		
		$method = '';
		$assess = '';
		if($clo){
			$s=1;
			if($clo->cloDeliveries){
			foreach($clo->cloDeliveries as $row){
				$comma = $s == 1 ? '' : ', ' ;
				$method .= $comma.$row->delivery->delivery_name_bi ;
			$s++;
			}
			}
		if($clo->cloAssessments){
			$s = 1;
		foreach($clo->cloAssessments as $row){
			$comma = $s == 1 ? '' : ', ' ;
			if($row->assessment){
				$assess  .= $comma.$row->assessment->assess_name_bi ;
			}
			$s++;
		}
		}

		}
		
		
		$this->sheet
			->setCellValue('P' . $curr_row , $method)
			->setCellValue('Q' . $curr_row , $assess)
			;
			
		$this->curr_row = $curr_row + 1;
		
	}
	
	public function item8PloFooter(){
		//ROW HEIGHT
		
		$this->sheet->getRowDimension($this->curr_row)->setRowHeight(24);
		$next_row = $this->curr_row + 1;
		$next_row2 = $this->curr_row + 2;
		$this->sheet->getRowDimension($next_row)->setRowHeight(24);
		$this->sheet->getRowDimension($next_row2)->setRowHeight(24);
		
		//MERGE
		$this->sheet->mergeCells('B'.$this->ploHeadStart .':B' . $next_row2);
		$this->sheet->mergeCells('C'.$next_row .':Q' . $next_row);
		$this->sheet->mergeCells('C'.$next_row2 .':Q' . $next_row2);
		
		//BORDER
		$this->sheet->getStyle('B'.$this->ploHeadStart .':B' . $next_row2)->applyFromArray($this->border);
		$this->sheet->getStyle('C'.$this->curr_row .':Q' . $next_row2)->applyFromArray($this->border);

		//ALIGNMENT
		$this->sheet->getStyle('C'.$this->curr_row .':Q' . $next_row2)
		->getAlignment()->setVertical(Alignment::VERTICAL_CENTER)
		->setWrapText(true);
		

		
		//STYLE
		
		$this->sheet
			->getStyle('B'.$next_row2)->getFill()
			->setFillType(Fill::FILL_SOLID)
			->getStartColor()->setARGB($this->bgcolor);
			
			
		//CONTENT


		$this->sheet
			->setCellValue('C' . $next_row, 'Indicate the relevancy between the CLO and PLO by ticking “/“ the appropriate relevant box.')
			->setCellValue('C' . $next_row2 , '(This description must be read together  with Standards 2.1.2 , 2.2.1 and 2.2.2 in  Area 2 - pages 16 & 18)');
		
		$this->curr_row = $next_row2 + 1;
		
	}
	
	public function item9Transferable(){
		
		$trans_text = $this->model->profile->transfer_skill_bi;

		$version_type = $this->model->version_type_id;

		$transferables = $this->model->profile->transferables;

		if($version_type == 1){
			$this->item9TransferFirst(47.25, $trans_text);
		}elseif($version_type == 2){

			if($transferables){
				$kira = count($transferables);
				$i = 1;
				foreach($transferables as $transfer){
					$height = $kira == 1 ? 47.25 : 24;
					if($i == 1){
						$this->item9TransferFirst($height, $transfer->transferable->transferable_text_bi);
					}else{
						$this->item9TransferAdd($i, $transfer->transferable->transferable_text_bi);
					}
				$i++;
				}
			}else{
				$this->item9TransferFirst(47.25);
			}
			}else{ // if no version type
				$this->item9TransferFirst(47.25);
			}
	}
	
	public function item9TransferFirst($height = 24, $text = ''){
		$curr_row = $this->curr_row;
		$this->transferRowStart = $curr_row;
		
		//ROW HEIGHT
		$this->sheet->getRowDimension($curr_row)->setRowHeight($height);
		
		//MERGE
		$this->sheet->mergeCells('B'.$curr_row.':B'.$curr_row);
		$this->sheet->mergeCells('C'.$curr_row.':H'.$curr_row);
		$this->sheet->mergeCells('J'.$curr_row.':Q'.$curr_row);
		
		//BORDER
		$this->sheet->getStyle('B'.$curr_row.':B'.$curr_row)->applyFromArray($this->border);
		$this->sheet->getStyle('C'.$curr_row.':H'.$curr_row)->applyFromArray($this->border);
		$this->sheet->getStyle('I'.$curr_row.':I'.$curr_row)->applyFromArray($this->border_bold);
		$this->sheet->getStyle('J'.$curr_row.':Q'.$curr_row)->applyFromArray($this->border);

		//ALIGNMENT
		$this->sheet->getStyle('B'.$curr_row.':C'.$curr_row)
		->getAlignment()->setVertical(Alignment::VERTICAL_TOP)
		->setWrapText(true);
		
		$this->sheet->getStyle('I'.$curr_row.':I' . $curr_row)
		->getAlignment()->setVertical(Alignment::VERTICAL_CENTER)
		->setWrapText(true);
		
		$this->sheet->getStyle('I'.$curr_row.':I' . $curr_row)
		->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER)
		->setWrapText(true);
		
		$this->sheet->getStyle('J'.$curr_row.':J' . $curr_row)
		->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT)
		->setWrapText(true);
		
		$this->sheet->getStyle('J'.$curr_row.':J' . $curr_row)
		->getAlignment()->setVertical(Alignment::VERTICAL_TOP)
		->setWrapText(true);
		
		
		
		//STYLE
		
		$this->sheet
			->getStyle('B'.$curr_row.':I' . $curr_row)->getFill()
			->setFillType(Fill::FILL_SOLID)
			->getStartColor()->setARGB($this->bgcolor);
		

		$this->sheet
			->setCellValue('B' . $curr_row, '9.      ')
			->setCellValue('C' . $curr_row, 'Transferable Skills (if applicable)
(Skills learned in the course of study which can be useful and utilized in other settings)')
			->setCellValue('I' . $curr_row, '1')
			->setCellValue('J' . $curr_row, $text)
			;
		$this->curr_row = $curr_row + 1;
		
		
		
		
	}
	
	public function item9TransferAdd($transferNumber, $text){
		$curr_row = $this->curr_row;
		
		//ROW HEIGHT
		$this->sheet->getRowDimension($curr_row)->setRowHeight(24);
		
		//MERGE
		$this->sheet->mergeCells('B'.$this->transferRowStart .':B'.$curr_row);
		$this->sheet->mergeCells('C'.$this->transferRowStart .':H'.$curr_row);
		$this->sheet->mergeCells('J'.$curr_row.':Q'.$curr_row);
		
		//BORDER
		$this->sheet->getStyle('B'.$this->transferRowStart.':B'.$curr_row)->applyFromArray($this->border);
		$this->sheet->getStyle('C'.$this->transferRowStart.':H'.$curr_row)->applyFromArray($this->border);
		$this->sheet->getStyle('I'.$curr_row.':I'.$curr_row)->applyFromArray($this->border_bold);
		$this->sheet->getStyle('J'.$curr_row.':Q'.$curr_row)->applyFromArray($this->border);

		//ALIGNMENT
		
		$this->sheet->getStyle('I'.$curr_row.':I' . $curr_row)
		->getAlignment()->setVertical(Alignment::VERTICAL_CENTER)
		->setWrapText(true);
		
		$this->sheet->getStyle('I'.$curr_row.':I' . $curr_row)
		->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER)
		->setWrapText(true);
		
		$this->sheet->getStyle('J'.$curr_row.':J' . $curr_row)
		->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT)
		->setWrapText(true);
		
		$this->sheet->getStyle('J'.$curr_row.':J' . $curr_row)
		->getAlignment()->setVertical(Alignment::VERTICAL_TOP)
		->setWrapText(true);
		
		
		
		//STYLE
		
		$this->sheet
			->getStyle('B'.$this->transferRowStart .':I' . $curr_row)->getFill()
			->setFillType(Fill::FILL_SOLID)
			->getStartColor()->setARGB($this->bgcolor);
		

		$this->sheet
			->setCellValue('I' . $curr_row, $transferNumber)
			->setCellValue('J' . $curr_row, $text)
			;
		$this->curr_row = $curr_row + 1;
	}
	
	
	public function item10Slt(){
		$curr_row = $this->curr_row;
		$this->sltRowStart = $curr_row;
		$row2 = $curr_row + 1;
		//ROW HEIGHT
		$this->sheet->getRowDimension($curr_row)->setRowHeight(24);
		$this->sheet->getRowDimension($row2)->setRowHeight(24);
		//MERGE
		$this->sheet->mergeCells('B'.$curr_row.':B'.$row2);
		$this->sheet->mergeCells('C'.$curr_row.':Q'.$row2);
		
		//BORDER
		$this->sheet->getStyle('B'.$curr_row.':B'.$row2)->applyFromArray($this->border_bold);
		$this->sheet->getStyle('C'.$curr_row.':Q'.$row2)->applyFromArray($this->border_bold);
		

		//ALIGNMENT
		$this->sheet->getStyle('B'.$curr_row.':B'.$row2)
		->getAlignment()->setVertical(Alignment::VERTICAL_TOP)
		->setWrapText(true);
		
		$this->sheet->getStyle('C'.$curr_row)
		->getAlignment()->setVertical(Alignment::VERTICAL_TOP)
		->setWrapText(true);
	
		
		$this->sheet->getStyle('C'.$curr_row)
		->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT)
		->setWrapText(true);
		
		
		
		//STYLE
		
		$this->sheet
			->getStyle('B'.$curr_row.':Q' . $row2)->getFill()
			->setFillType(Fill::FILL_SOLID)
			->getStartColor()->setARGB($this->bgcolor);
		

		$this->sheet
			->setCellValue('B' . $curr_row, '10.      ')
			->setCellValue('C' . $curr_row, 'Distribution of Student Learning Time (SLT)')
			;
		$this->curr_row = $row2 + 1;
		
	}
	
	public function item10SltCourseContent(){
		$row1 = $this->curr_row;
		$row2 = $row1 + 1;
		$row3 = $row2 + 1;
		
		//ROW HEIGHT
		$this->sheet->getRowDimension($row1)->setRowHeight(24);
		$this->sheet->getRowDimension($row2)->setRowHeight(24);
		$this->sheet->getRowDimension($row3)->setRowHeight(64.5);
		//MERGE
		$this->sheet->mergeCells('B'.$this->sltRowStart.':B'.$row3);
		$this->sheet->mergeCells('C'.$row1.':I'.$row3);
		$this->sheet->mergeCells('J'.$row1.':J'.$row3);
		$this->sheet->mergeCells('K'.$row1.':P'.$row1);
		$this->sheet->mergeCells('Q'.$row1.':Q'.$row3);
		$this->sheet->mergeCells('K'.$row2.':N'.$row2);
		$this->sheet->mergeCells('O'.$row2.':O'.$row3);
		$this->sheet->mergeCells('P'.$row2.':P'.$row3);
		
		//BORDER
		$this->sheet->getStyle('B'.$this->sltRowStart.':B'.$row3)->applyFromArray($this->border_bold);
		$this->sheet->getStyle('C'.$row1.':I'.$row3)->applyFromArray($this->border_bold);
		$this->sheet->getStyle('J'.$row1.':J'.$row3)->applyFromArray($this->border_bold);
		$this->sheet->getStyle('K'.$row1.':P'.$row1)->applyFromArray($this->border_bold);
		$this->sheet->getStyle('Q'.$row1.':Q'.$row3)->applyFromArray($this->border_bold);
		$this->sheet->getStyle('K'.$row2.':N'.$row2)->applyFromArray($this->border_bold);
		$this->sheet->getStyle('O'.$row2.':O'.$row3)->applyFromArray($this->border_bold);
		$this->sheet->getStyle('P'.$row2.':P'.$row3)->applyFromArray($this->border_bold);
		$this->sheet->getStyle('K'.$row3)->applyFromArray($this->border_bold);
		$this->sheet->getStyle('L'.$row3)->applyFromArray($this->border_bold);
		$this->sheet->getStyle('M'.$row3)->applyFromArray($this->border_bold);
		$this->sheet->getStyle('N'.$row3)->applyFromArray($this->border_bold);
		

		//ALIGNMENT
		$this->sheet->getStyle('C'.$row1.':Q'.$row3)
		->getAlignment()->setVertical(Alignment::VERTICAL_CENTER)
		->setWrapText(true);
		
		$this->sheet->getStyle('C'.$row1.':Q'.$row3)
		->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER)
		->setWrapText(true);
		
		
		
		//STYLE
		
		$this->sheet
			->getStyle('B'.$row1.':Q'.$row3)->getFill()
			->setFillType(Fill::FILL_SOLID)
			->getStartColor()->setARGB($this->bgcolor);
		
		//VALUE

		$this->sheet
			->setCellValue('C' . $row1, 'Course Content Outline')
			->setCellValue('J' . $row1, 'CLO*')
			->setCellValue('K' . $row1, 'Teaching and Learning Activities')
			->setCellValue('Q' . $row1, 'SLT')
			->setCellValue('K' . $row2, 'Guided Learning (F2F)')
			->setCellValue('O' . $row2, 'Guided Learning (NF2F)
eg: 
e-Learning')
			->setCellValue('P' . $row2, 'Independent Learning (NF2F)')
			->setCellValue('K' . $row3, 'L')
			->setCellValue('L' . $row3, 'P')
			->setCellValue('M' . $row3, 'T')
			->setCellValue('N' . $row3, 'O')
			;
			
		$this->curr_row = $row3 + 1;
		$this->sltContentStart = $row3 + 1;
		
		if($this->model->syllabus ){
			foreach($this->model->syllabus as $row){
			$arr_all = json_decode($row->topics);
			$topic = '';
			if($arr_all){
			//16
			$row_count = 0;
			$i = 1;
			foreach($arr_all as $rt){
				$wk = $i == 1 ? $row->week_num . ".  " : '';
				$br = $i == 1 ? '' : "\n";
				$topic .= $br . $wk . $rt->top_bi;
				$row_count++;
				if($rt->sub_topic){
					foreach($rt->sub_topic as $rst){
					$topic .= "\n" . '     - ' . $rst->sub_bi;
					$row_count++;
					}
				}
			$i++;
			}
			}
			
			$height = 30;
			
			if($row_count > 1){
				$height = $row_count * 16;
			}
			
			$clo = json_decode($row->clo);
			$clo_str="";
			if($clo){
				$kk=1;
				foreach($clo as $clonum){
					$comma = $kk == 1 ? "" : ", ";
					$clo_str .= $comma. 'CLO'.$clonum;
					$kk++;
				}
			}
			
			$numbers = [$row->pnp_lecture, $row->pnp_tutorial, $row->pnp_practical, $row->pnp_others, $row->nf2f, $row->independent];
			
			$this->item10SltContentText($height, $topic, $clo_str, $numbers);
			
			/* 
			$html .= $str ;
			
			$sub = $row->pnp_lecture + $row->pnp_tutorial + $row->pnp_practical + $row->pnp_others + $row->independent + $row->nf2f;
			$html .= $sub;
			$tlec += $row->pnp_lecture;
			$ttut += $row->pnp_tutorial;
			$tprac += $row->pnp_practical;
			$toth += $row->pnp_others;
			$tind += $row->nf2f;
			$tass += $row->independent;
			$tgrand +=$sub; */
				
		}
		}
		
		
	}
	
	public function item10SltContentText($height, $topic, $clo, $numbers){
		$curr_row = $this->curr_row;
		//ROW HEIGHT
		$this->sheet->getRowDimension($curr_row)->setRowHeight($height);
		//MERGE
		$this->sheet->mergeCells('B'.$this->sltRowStart.':B'.$curr_row);
		$this->sheet->mergeCells('C'.$curr_row.':I'.$curr_row);
		
		//BORDER
		$this->sheet->getStyle('B'.$this->sltRowStart.':B'.$curr_row)->applyFromArray($this->border_bold);
		$this->sheet->getStyle('C'.$curr_row.':I'.$curr_row)->applyFromArray($this->border);
		$this->sheet->getStyle('J'.$curr_row)->applyFromArray($this->border);
		$this->sheet->getStyle('K'.$curr_row)->applyFromArray($this->border);
		$this->sheet->getStyle('L'.$curr_row)->applyFromArray($this->border);
		$this->sheet->getStyle('M'.$curr_row)->applyFromArray($this->border);
		$this->sheet->getStyle('N'.$curr_row)->applyFromArray($this->border);
		$this->sheet->getStyle('O'.$curr_row)->applyFromArray($this->border);
		$this->sheet->getStyle('P'.$curr_row)->applyFromArray($this->border);
		$this->sheet->getStyle('Q'.$curr_row)->applyFromArray($this->border);
		

		//ALIGNMENT
		
		$this->sheet->getStyle('C'.$curr_row)
		->getAlignment()->setVertical(Alignment::VERTICAL_TOP)
		->setWrapText(true);
		
		$this->sheet->getStyle('C'.$curr_row)
		->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT)
		->setWrapText(true);
		
		$this->sheet->getStyle('J'.$curr_row)
		->getAlignment()->setVertical(Alignment::VERTICAL_TOP)
		->setWrapText(true);
		
		$this->sheet->getStyle('K'.$curr_row.':Q'.$curr_row)
		->getAlignment()->setVertical(Alignment::VERTICAL_CENTER)
		->setWrapText(true);
		
		$this->sheet->getStyle('J'.$curr_row.':Q'.$curr_row)
		->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER)
		->setWrapText(true);
		
		//STYLE
		
		$this->sheet
			->getStyle('B'.$this->sltRowStart.':B'.$curr_row)->getFill()
			->setFillType(Fill::FILL_SOLID)
			->getStartColor()->setARGB($this->bgcolor);
		
		$this->sheet
			->getStyle('Q'.$curr_row)->getFill()
			->setFillType(Fill::FILL_SOLID)
			->getStartColor()->setARGB($this->bgcolor);
		
		//VALUE

		$this->sheet
			->setCellValue('C' . $curr_row, $topic)
			->setCellValue('J' . $curr_row, $clo)
			->setCellValue('K' . $curr_row, $numbers[0])
			->setCellValue('L' . $curr_row, $numbers[1])
			->setCellValue('M' . $curr_row, $numbers[2])
			->setCellValue('N' . $curr_row, $numbers[3])
			->setCellValue('O' . $curr_row, $numbers[4])
			->setCellValue('P' . $curr_row, $numbers[5])
			->setCellValue('Q' . $curr_row, '=SUM(K'.$curr_row.':P'.$curr_row.')')
			;
			
		$this->curr_row = $curr_row + 1;
		
	}
	
	public function item10ContentFooter(){
		//ROW HEIGHT
		
		$this->sheet->getRowDimension($this->curr_row)->setRowHeight(24);
		
		$curr_row = $this->curr_row;
		$this->sltTotalContentRow = $curr_row;
		$next_row = $curr_row + 1;
		$this->sheet->getRowDimension($curr_row)->setRowHeight(24);
		$this->sheet->getRowDimension($next_row)->setRowHeight(24);
		
		//MERGE
		$this->sheet->mergeCells('B'.$this->sltRowStart .':B' . $next_row);
		$this->sheet->mergeCells('C'.$curr_row .':I' . $curr_row);
		$this->sheet->mergeCells('J'.$curr_row .':P' . $curr_row);
		
		//BORDER
		$this->sheet->getStyle('B'.$this->sltRowStart .':B' . $next_row)->applyFromArray($this->border);
		$this->sheet->getStyle('C'.$curr_row .':Q' . $next_row)->applyFromArray($this->border);
		$this->sheet->getStyle('Q' . $curr_row)->applyFromArray($this->border);
		$this->sheet->getStyle('J' . $curr_row)->applyFromArray($this->bold);

		//ALIGNMENT
		$this->sheet->getStyle('J'.$curr_row)
		->getAlignment()->setHorizontal(Alignment::HORIZONTAL_RIGHT)
		->setWrapText(true);
		$this->sheet->getStyle('J'.$curr_row)
		->getAlignment()->setVertical(Alignment::VERTICAL_CENTER)
		->setWrapText(true);
		$this->sheet->getStyle('Q'.$curr_row)
		->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER)
		->setWrapText(true);
		$this->sheet->getStyle('Q'.$curr_row)
		->getAlignment()->setVertical(Alignment::VERTICAL_CENTER)
		->setWrapText(true);
		
		//STYLE
		
		$this->sheet
			->getStyle('Q'.$curr_row)->getFill()
			->setFillType(Fill::FILL_SOLID)
			->getStartColor()->setARGB($this->bgcolor);
			
			
		//CONTENT

		$pre = $curr_row - 1;
		$this->sheet
			->setCellValue('J' . $curr_row, 'Total')
			->setCellValue('Q' . $curr_row, '=SUM(Q'.$this->sltContentStart.':Q'.$pre.')')
			;
		
		$this->curr_row = $next_row + 1;
		
	}
	
	public function item10SltAssessConHead(){
		$curr_row = $this->curr_row;
		$row2 = $curr_row + 1;
		//ROW HEIGHT
		$this->sheet->getRowDimension($curr_row)->setRowHeight(24);
		$this->sheet->getRowDimension($row2)->setRowHeight(24);
		//MERGE
		$this->sheet->mergeCells('B'.$this->sltRowStart .':B'.$row2);
		$this->sheet->mergeCells('C'.$curr_row.':I'.$row2);
		$this->sheet->mergeCells('J'.$curr_row.':J'.$row2);
		$this->sheet->mergeCells('K'.$curr_row.':M'.$row2);
		$this->sheet->mergeCells('N'.$curr_row.':P'.$row2);
		$this->sheet->mergeCells('Q'.$curr_row.':Q'.$row2);
		
		//BORDER
		$this->sheet->getStyle('B'.$this->sltRowStart .':B'.$row2)->applyFromArray($this->border_bold);
		$this->sheet->getStyle('C'.$curr_row.':I'.$row2)->applyFromArray($this->border_bold);
		$this->sheet->getStyle('J'.$curr_row.':J'.$row2)->applyFromArray($this->border_bold);
		$this->sheet->getStyle('K'.$curr_row.':M'.$row2)->applyFromArray($this->border_bold);
		$this->sheet->getStyle('N'.$curr_row.':P'.$row2)->applyFromArray($this->border_bold);$this->sheet->getStyle('Q'.$curr_row.':Q'.$row2)->applyFromArray($this->border_bold);
		

		//ALIGNMENT
		
		$this->sheet->getStyle('C'.$curr_row . ':Q' . $row2)
		->getAlignment()->setVertical(Alignment::VERTICAL_CENTER)
		->setWrapText(true);
	
		$this->sheet->getStyle('C'.$curr_row . ':Q' . $row2)
		->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER)
		->setWrapText(true);
		
		
		
		//STYLE
		
		$this->sheet
			->getStyle('C'.$curr_row . ':Q' . $row2)->getFill()
			->setFillType(Fill::FILL_SOLID)
			->getStartColor()->setARGB($this->bgcolor);
		

		$this->sheet
			->setCellValue('C' . $curr_row, 'Continuous Assessment')
			->setCellValue('J' . $curr_row, 'Percentage (%) ')
			->setCellValue('J' . $curr_row, 'Percentage (%) ')
			->setCellValue('K' . $curr_row, 'F2F')
			->setCellValue('N' . $curr_row, 'NF2F')
			->setCellValue('Q' . $curr_row, 'SLT')
			;
		$this->curr_row = $row2 + 1;
		
		$this->sltAssessConStart = $row2 + 1;
		if($this->model->courseAssessmentFormative){
			$i = 1;
			foreach($this->model->courseAssessmentFormative as $rf){
					$per = $rf->as_percentage + 0;
					$f2f = $rf->assess_f2f;
					$nf2f = $rf->assess_nf2f;
					$data = [$per, $f2f, $nf2f];
					
					$this->item10SltAssessConText($i, $rf->assess_name_bi, $data);
			$i++;
			}
			}else{
				$data = ['','',''];
				$this->item10SltAssessConText(1, '', $data);
			}
		
		
	}
	
	public function item10SltAssessConText($number, $name, $data){
		$curr_row = $this->curr_row;
		//ROW HEIGHT
		$this->sheet->getRowDimension($curr_row)->setRowHeight(24);
		
		//MERGE
		$this->sheet->mergeCells('B'.$this->sltRowStart .':B'.$curr_row);
		$this->sheet->mergeCells('D'.$curr_row.':I'.$curr_row);
		$this->sheet->mergeCells('K'.$curr_row.':M'.$curr_row);
		$this->sheet->mergeCells('N'.$curr_row.':P'.$curr_row);
		
		//BORDER
		$this->sheet->getStyle('B'.$this->sltRowStart .':B'.$curr_row)->applyFromArray($this->border_bold);
		$this->sheet->getStyle('C'.$curr_row)->applyFromArray($this->border);
		$this->sheet->getStyle('D'.$curr_row.':I'.$curr_row)->applyFromArray($this->border);
		$this->sheet->getStyle('J'.$curr_row)->applyFromArray($this->border);
		$this->sheet->getStyle('K'.$curr_row.':M'.$curr_row)->applyFromArray($this->border);
		$this->sheet->getStyle('N'.$curr_row.':P'.$curr_row)->applyFromArray($this->border);
		$this->sheet->getStyle('Q'.$curr_row)->applyFromArray($this->border);
		

		//ALIGNMENT
		
		$this->sheet->getStyle('C'.$curr_row)
		->getAlignment()->setVertical(Alignment::VERTICAL_CENTER)
		->setWrapText(true);
		$this->sheet->getStyle('C'.$curr_row)
		->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER)
		->setWrapText(true);
	
		$this->sheet->getStyle('D'.$curr_row)
		->getAlignment()->setVertical(Alignment::VERTICAL_TOP)
		->setWrapText(true);
		$this->sheet->getStyle('D'.$curr_row)
		->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT)
		->setWrapText(true);
		
		$this->sheet->getStyle('J'.$curr_row.':Q'.$curr_row)
		->getAlignment()->setVertical(Alignment::VERTICAL_CENTER)
		->setWrapText(true);
		$this->sheet->getStyle('J'.$curr_row.':Q'.$curr_row)
		->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER)
		->setWrapText(true);
		
		//STYLE
		
		$this->sheet
			->getStyle('C'.$curr_row)->getFill()
			->setFillType(Fill::FILL_SOLID)
			->getStartColor()->setARGB($this->bgcolor);
			
		$this->sheet
			->getStyle('Q'.$curr_row)->getFill()
			->setFillType(Fill::FILL_SOLID)
			->getStartColor()->setARGB($this->bgcolor);
		

		$this->sheet
			->setCellValue('C' . $curr_row, $number)
			->setCellValue('D' . $curr_row, $name)
			->setCellValue('J' . $curr_row, $data[0])
			->setCellValue('K' . $curr_row, $data[1])
			->setCellValue('N' . $curr_row, $data[2])
			->setCellValue('Q' . $curr_row, '=SUM(K'.$curr_row.':P'.$curr_row.')')
			;
		$this->curr_row = $curr_row + 1;
		
	}
	
	public function item10SltAssessConFooter(){
		//ROW HEIGHT
		
		$this->sheet->getRowDimension($this->curr_row)->setRowHeight(24);
		
		$curr_row = $this->curr_row;
		$this->sltTotalAssessConRow = $curr_row;
		$next_row = $curr_row + 1;
		$this->sheet->getRowDimension($curr_row)->setRowHeight(24);
		$this->sheet->getRowDimension($next_row)->setRowHeight(24);
		
		//MERGE
		$this->sheet->mergeCells('B'.$this->sltRowStart .':B' . $next_row);
		$this->sheet->mergeCells('C'.$curr_row .':I' . $curr_row);
		$this->sheet->mergeCells('J'.$curr_row .':P' . $curr_row);
		
		//BORDER
		$this->sheet->getStyle('B'.$this->sltRowStart .':B' . $next_row)->applyFromArray($this->border);
		$this->sheet->getStyle('C'.$curr_row .':Q' . $next_row)->applyFromArray($this->border);
		$this->sheet->getStyle('Q' . $curr_row)->applyFromArray($this->border);
		$this->sheet->getStyle('J' . $curr_row)->applyFromArray($this->bold);

		//ALIGNMENT
		$this->sheet->getStyle('J'.$curr_row)
		->getAlignment()->setHorizontal(Alignment::HORIZONTAL_RIGHT)
		->setWrapText(true);
		$this->sheet->getStyle('J'.$curr_row)
		->getAlignment()->setVertical(Alignment::VERTICAL_CENTER)
		->setWrapText(true);
		$this->sheet->getStyle('Q'.$curr_row)
		->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER)
		->setWrapText(true);
		$this->sheet->getStyle('Q'.$curr_row)
		->getAlignment()->setVertical(Alignment::VERTICAL_CENTER)
		->setWrapText(true);
		
		//STYLE
		
		$this->sheet
			->getStyle('Q'.$curr_row)->getFill()
			->setFillType(Fill::FILL_SOLID)
			->getStartColor()->setARGB($this->bgcolor);
			
			
		//CONTENT

		$pre = $curr_row - 1;
		$this->sheet
			->setCellValue('J' . $curr_row, 'Total')
			->setCellValue('Q' . $curr_row, '=SUM(Q'.$this->sltAssessConStart.':Q'.$pre.')')
			;
		
		$this->curr_row = $next_row + 1;
		
	}
	
	public function item10SltAssessSumHead(){
		$curr_row = $this->curr_row;
		$row2 = $curr_row + 1;
		//ROW HEIGHT
		$this->sheet->getRowDimension($curr_row)->setRowHeight(24);
		$this->sheet->getRowDimension($row2)->setRowHeight(24);
		//MERGE
		$this->sheet->mergeCells('B'.$this->sltRowStart .':B'.$row2);
		$this->sheet->mergeCells('C'.$curr_row.':I'.$row2);
		$this->sheet->mergeCells('J'.$curr_row.':J'.$row2);
		$this->sheet->mergeCells('K'.$curr_row.':M'.$row2);
		$this->sheet->mergeCells('N'.$curr_row.':P'.$row2);
		$this->sheet->mergeCells('Q'.$curr_row.':Q'.$row2);
		
		//BORDER
		$this->sheet->getStyle('B'.$this->sltRowStart .':B'.$row2)->applyFromArray($this->border_bold);
		$this->sheet->getStyle('C'.$curr_row.':I'.$row2)->applyFromArray($this->border_bold);
		$this->sheet->getStyle('J'.$curr_row.':J'.$row2)->applyFromArray($this->border_bold);
		$this->sheet->getStyle('K'.$curr_row.':M'.$row2)->applyFromArray($this->border_bold);
		$this->sheet->getStyle('N'.$curr_row.':P'.$row2)->applyFromArray($this->border_bold);$this->sheet->getStyle('Q'.$curr_row.':Q'.$row2)->applyFromArray($this->border_bold);
		

		//ALIGNMENT
		
		$this->sheet->getStyle('C'.$curr_row . ':Q' . $row2)
		->getAlignment()->setVertical(Alignment::VERTICAL_CENTER)
		->setWrapText(true);
	
		$this->sheet->getStyle('C'.$curr_row . ':Q' . $row2)
		->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER)
		->setWrapText(true);
		
		
		
		//STYLE
		
		$this->sheet
			->getStyle('C'.$curr_row . ':Q' . $row2)->getFill()
			->setFillType(Fill::FILL_SOLID)
			->getStartColor()->setARGB($this->bgcolor);
		

		$this->sheet
			->setCellValue('C' . $curr_row, 'Continuous Assessment')
			->setCellValue('J' . $curr_row, 'Percentage (%) ')
			->setCellValue('J' . $curr_row, 'Percentage (%) ')
			->setCellValue('K' . $curr_row, 'F2F')
			->setCellValue('N' . $curr_row, 'NF2F')
			->setCellValue('Q' . $curr_row, 'SLT')
			;
		$this->curr_row = $row2 + 1;
		
		$this->sltAssessSumStart = $row2 + 1;
		if($this->model->courseAssessmentSummative){
			$i = 1;
			foreach($this->model->courseAssessmentSummative as $rf){
					$per = $rf->as_percentage + 0;
					$f2f = $rf->assess_f2f;
					$nf2f = $rf->assess_nf2f;
					$data = [$per, $f2f, $nf2f];
					
					$this->item10SltAssessSumText($i, $rf->assess_name_bi, $data);
			$i++;
			}
			}else{
				$data = ['','',''];
				$this->item10SltAssessSumText(1, '', $data);
			}
		
		
	}
	
	public function item10SltAssessSumText($number, $name, $data){
		$curr_row = $this->curr_row;
		//ROW HEIGHT
		$this->sheet->getRowDimension($curr_row)->setRowHeight(24);
		
		//MERGE
		$this->sheet->mergeCells('B'.$this->sltRowStart .':B'.$curr_row);
		$this->sheet->mergeCells('D'.$curr_row.':I'.$curr_row);
		$this->sheet->mergeCells('K'.$curr_row.':M'.$curr_row);
		$this->sheet->mergeCells('N'.$curr_row.':P'.$curr_row);
		
		//BORDER
		$this->sheet->getStyle('B'.$this->sltRowStart .':B'.$curr_row)->applyFromArray($this->border_bold);
		$this->sheet->getStyle('C'.$curr_row)->applyFromArray($this->border);
		$this->sheet->getStyle('D'.$curr_row.':I'.$curr_row)->applyFromArray($this->border);
		$this->sheet->getStyle('J'.$curr_row)->applyFromArray($this->border);
		$this->sheet->getStyle('K'.$curr_row.':M'.$curr_row)->applyFromArray($this->border);
		$this->sheet->getStyle('N'.$curr_row.':P'.$curr_row)->applyFromArray($this->border);
		$this->sheet->getStyle('Q'.$curr_row)->applyFromArray($this->border);
		

		//ALIGNMENT
		
		$this->sheet->getStyle('C'.$curr_row)
		->getAlignment()->setVertical(Alignment::VERTICAL_CENTER)
		->setWrapText(true);
		$this->sheet->getStyle('C'.$curr_row)
		->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER)
		->setWrapText(true);
	
		$this->sheet->getStyle('D'.$curr_row)
		->getAlignment()->setVertical(Alignment::VERTICAL_TOP)
		->setWrapText(true);
		$this->sheet->getStyle('D'.$curr_row)
		->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT)
		->setWrapText(true);
		
		$this->sheet->getStyle('J'.$curr_row.':Q'.$curr_row)
		->getAlignment()->setVertical(Alignment::VERTICAL_CENTER)
		->setWrapText(true);
		$this->sheet->getStyle('J'.$curr_row.':Q'.$curr_row)
		->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER)
		->setWrapText(true);
		
		//STYLE
		
		$this->sheet
			->getStyle('C'.$curr_row)->getFill()
			->setFillType(Fill::FILL_SOLID)
			->getStartColor()->setARGB($this->bgcolor);
			
		$this->sheet
			->getStyle('Q'.$curr_row)->getFill()
			->setFillType(Fill::FILL_SOLID)
			->getStartColor()->setARGB($this->bgcolor);
		

		$this->sheet
			->setCellValue('C' . $curr_row, $number)
			->setCellValue('D' . $curr_row, $name)
			->setCellValue('J' . $curr_row, $data[0])
			->setCellValue('K' . $curr_row, $data[1])
			->setCellValue('N' . $curr_row, $data[2])
			->setCellValue('Q' . $curr_row, '=SUM(K'.$curr_row.':P'.$curr_row.')')
			;
		$this->curr_row = $curr_row + 1;
		
	}
	
	public function item10SltAssessSumFooter(){
		//ROW HEIGHT
		
		$this->sheet->getRowDimension($this->curr_row)->setRowHeight(24);
		
		$curr_row = $this->curr_row;
		$this->sltTotalAssessSumRow = $curr_row;
		$next_row = $curr_row + 1;
		$row3 = $curr_row + 2;
		$row4 = $curr_row + 3;
		$row5 = $curr_row + 4;
		
		$this->sheet->getRowDimension($curr_row)->setRowHeight(24);
		$this->sheet->getRowDimension($next_row)->setRowHeight(24);
		$this->sheet->getRowDimension($row3)->setRowHeight(24);
		$this->sheet->getRowDimension($row4)->setRowHeight(24);
		$this->sheet->getRowDimension($row5)->setRowHeight(24);
		
		//MERGE
		$this->sheet->mergeCells('B'.$this->sltRowStart .':B' . $row5);
		$this->sheet->mergeCells('J'.$curr_row .':P' . $curr_row);
		$this->sheet->mergeCells('C'.$next_row .':J' . $row3); // text
		$this->sheet->mergeCells('O'.$row3 .':P' . $row3); //text grand
		$this->sheet->mergeCells('C'.$row4 .':K' . $row4); //text 2
		$this->sheet->mergeCells('C'.$row5.':I' . $row5); //text 2
		
		//BORDER
		$this->sheet->getStyle('B'.$this->sltRowStart .':B' . $row5)->applyFromArray($this->border);
		$this->sheet->getStyle('C'.$curr_row .':Q' . $row5)->applyFromArray($this->border);
		$this->sheet->getStyle('N'.$row3)->applyFromArray($this->border);
		$this->sheet->getStyle('Q'.$row3)->applyFromArray($this->border);
		$this->sheet->getStyle('Q'.$curr_row)->applyFromArray($this->border);
		$this->sheet->getStyle('C'.$next_row)->applyFromArray($this->bold);
		$this->sheet->getStyle('O'.$row3)->applyFromArray($this->bold);

		//ALIGNMENT
		$this->sheet->getStyle('Q'.$curr_row)
		->getAlignment()->setVertical(Alignment::VERTICAL_CENTER)
		->setWrapText(true);
		$this->sheet->getStyle('Q'.$curr_row)
		->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER)
		->setWrapText(true);
		
		$this->sheet->getStyle('O'.$row3)
		->getAlignment()->setVertical(Alignment::VERTICAL_CENTER)
		->setWrapText(true);
		$this->sheet->getStyle('O'.$row3)
		->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER)
		->setWrapText(true);
		
		$this->sheet->getStyle('C'.$next_row)
		->getAlignment()->setVertical(Alignment::VERTICAL_BOTTOM)
		->setWrapText(true);
		$this->sheet->getStyle('C'.$row4 .':K' . $row5)
		->getAlignment()->setVertical(Alignment::VERTICAL_CENTER)
		->setWrapText(true);
		
		
		$this->sheet->getStyle('N'.$row4 .':Q' . $row4)
		->getAlignment()->setVertical(Alignment::VERTICAL_CENTER)
		->setWrapText(true);
		$this->sheet->getStyle('N'.$row4 .':Q' . $row4)
		->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER)
		->setWrapText(true);
		
		$this->sheet->getStyle('Q' . $row3)
		->getAlignment()->setVertical(Alignment::VERTICAL_CENTER)
		->setWrapText(true);
		$this->sheet->getStyle('Q' . $row3)
		->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER)
		->setWrapText(true);
		
		//STYLE
		
		$this->sheet
			->getStyle('Q'.$curr_row)->getFill()
			->setFillType(Fill::FILL_SOLID)
			->getStartColor()->setARGB($this->bgcolor);
		
		$this->sheet
			->getStyle('Q'.$row3)->getFill()
			->setFillType(Fill::FILL_SOLID)
			->getStartColor()->setARGB($this->bgcolor);
			
			
		//CONTENT
		if($this->model->slt->is_practical == 1){
			$tick_prac = '√';
		}else{
			$tick_prac = '';
		}

		$pre = $curr_row - 1;
		$this->sheet
			->setCellValue('C' . $next_row, '**Please tick (√) if this course is Latihan Industri/ Clinical Placement/ Practicum/ WBL using Effective Learning Time(ELT) of 50%')
			->setCellValue('C' . $row4, 'L = Lecture, T = Tutorial, P= Practical, O= Others, F2F=Face to Face, NF2F=Non Face to Face')
			->setCellValue('C' . $row5, '*Indicate the CLO based on the CLO’s numbering in Item 8.')
			->setCellValue('Q' . $curr_row, '=SUM(Q'.$this->sltAssessSumStart.':Q'.$pre.')')
			->setCellValue('O' . $row3, 'GRAND TOTAL SLT')
			->setCellValue('Q' . $row3, '=SUM(Q'.$this->sltTotalContentRow.',Q'.$this->sltTotalAssessConRow.',Q'.$this->sltTotalAssessSumRow .')')
			->setCellValue('N' . $row3, $tick_prac)
			//GRAND TOTAL SLT
			;
		
		$this->curr_row = $row5 + 1;
		
	}
	
	public function item11Requirement(){
		//ROW HEIGHT
		
		$this->sheet->getRowDimension($this->curr_row)->setRowHeight(55.5);
		
		$curr_row = $this->curr_row;
		
		//MERGE
		$this->sheet->mergeCells('C'.$curr_row .':D' . $curr_row);
		$this->sheet->mergeCells('E'.$curr_row .':Q' . $curr_row); // text
		
		//BORDER
		$this->sheet->getStyle('B'.$curr_row .':B' . $curr_row)->applyFromArray($this->border);
		$this->sheet->getStyle('C'.$curr_row .':D' . $curr_row)->applyFromArray($this->border);
		$this->sheet->getStyle('E'.$curr_row .':Q' . $curr_row)->applyFromArray($this->border);

		//ALIGNMENT
		$this->sheet->getStyle('B'.$curr_row.':Q' . $curr_row)
		->getAlignment()->setVertical(Alignment::VERTICAL_TOP)
		->setWrapText(true);
		$this->sheet->getStyle('B'.$curr_row.':Q' . $curr_row)
		->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT)
		->setWrapText(true);
		
		
		//STYLE
		
		$this->sheet
			->getStyle('B'.$curr_row .':D' . $curr_row)->getFill()
			->setFillType(Fill::FILL_SOLID)
			->getStartColor()->setARGB($this->bgcolor);
		
			
			
		//CONTENT

		$pre = $curr_row - 1;
		$this->sheet
			->setCellValue('B' . $curr_row, '11.      ')
			->setCellValue('C' . $curr_row, 'Identify special requirement to deliver the course (e.g: software, nursery, computer lab, simulation room, etc)')
			->setCellValue('E' . $curr_row, $this->model->profile->requirement_bi)
			;
		
		$this->curr_row = $curr_row + 1;
		
	}
	
	
	public function item12Reference(){
		//ROW HEIGHT
		$curr_row = $this->curr_row;
		
		$row2 = $curr_row + 1;
		$row3 = $curr_row + 2;
		
		$this->sheet->getRowDimension($this->curr_row)->setRowHeight(35.5);
		$this->sheet->getRowDimension($row2)->setRowHeight(35.5);
		$this->sheet->getRowDimension($row3)->setRowHeight(15);
		
		//MERGE
		$this->sheet->mergeCells('B'.$curr_row .':B' . $row3);
		$this->sheet->mergeCells('C'.$curr_row .':H' . $row3);
		$this->sheet->mergeCells('I'.$curr_row .':Q' . $row3); // text
		
		//BORDER
		$this->sheet->getStyle('B'.$curr_row .':B' . $row3)->applyFromArray($this->border);
		$this->sheet->getStyle('C'.$curr_row .':H' . $row3)->applyFromArray($this->border);
		$this->sheet->getStyle('I'.$curr_row .':Q' . $row3)->applyFromArray($this->border);

		//ALIGNMENT
		$this->sheet->getStyle('B'.$curr_row.':Q' . $curr_row)
		->getAlignment()->setVertical(Alignment::VERTICAL_TOP)
		->setWrapText(true);
		$this->sheet->getStyle('B'.$curr_row.':Q' . $curr_row)
		->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT)
		->setWrapText(true);
		
		
		//STYLE
		
		$this->sheet
			->getStyle('B'.$curr_row .':H' . $row3)->getFill()
			->setFillType(Fill::FILL_SOLID)
			->getStartColor()->setARGB($this->bgcolor);
		
			
			
		//CONTENT
		$i = 1;
		$ref = '';
		$br = '';
		if($this->model->mainReferences){
			foreach($this->model->mainReferences as $row){
				$br = $i == 1 ? "" : "\n";
				$ref .= $br . $i.'. '. strip_tags($row->formatedReference);
			$i++;
			}
		}
		$x = 1;
		if($this->model->additionalReferences){
			foreach($this->model->additionalReferences as $row){
				$br = $x == 1 ? "" : "\n";
				$ref .= $br . $i.'. '. strip_tags($row->formatedReference);
			$x++;
			$i++;
			}
		}
		
		//echo $ref;die();
		$this->sheet
			->setCellValue('B' . $curr_row, '12.      ')
			->setCellValue('C' . $curr_row, 'References (include required and further readings, and should be the most current)')
			->setCellValue('I' . $curr_row , $ref)
			;
		
		$this->curr_row = $row3 + 1;
		
	}
	
	public function item13Other(){
		
		//ROW HEIGHT
		$curr_row = $this->curr_row;
		
		$this->sheet->getRowDimension($this->curr_row)->setRowHeight(45.75);
		
		//MERGE
		$this->sheet->mergeCells('C'. $curr_row .':H' . $curr_row);
		$this->sheet->mergeCells('I'.$curr_row .':Q' . $curr_row);
		
		//BORDER
		$this->sheet->getStyle('B'.$curr_row)->applyFromArray($this->border);
		$this->sheet->getStyle('C'.$curr_row .':H' . $curr_row)->applyFromArray($this->border);
		$this->sheet->getStyle('I'.$curr_row .':Q' . $curr_row)->applyFromArray($this->border);
		
		//ALIGNMENT
		$this->sheet->getStyle('B'.$curr_row.':Q' . $curr_row)
		->getAlignment()->setVertical(Alignment::VERTICAL_TOP)
		->setWrapText(true);
		$this->sheet->getStyle('B'.$curr_row.':Q' . $curr_row)
		->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT)
		->setWrapText(true);
		
		//STYLE
		
		$this->sheet
			->getStyle('B'.$curr_row .':H' . $curr_row)->getFill()
			->setFillType(Fill::FILL_SOLID)
			->getStartColor()->setARGB($this->bgcolor);
		
			
			
		//CONTENT
		
		$this->sheet
			->setCellValue('B' . $curr_row, '13.      ')
			->setCellValue('C' . $curr_row, 'Other additional information :')
			->setCellValue('I' . $curr_row , $this->model->profile->additional_bi)
			;
		
		$this->curr_row = $curr_row + 1;
		
	}
	
	
	public function generate(){
		// Rename worksheet
		$this->spreadsheet->getActiveSheet()->setTitle($this->model->course->course_code);

		// Set active sheet index to the first sheet, so Excel opens this as the first sheet
		$this->spreadsheet->setActiveSheetIndex(0);
		
		// Redirect output to a client’s web browser (Xls)
		header('Content-Type: application/vnd.ms-excel');
		header('Content-Disposition: attachment;filename="'.$this->model->course->course_code.'.xls"');
		header('Cache-Control: max-age=0');
		// If you're serving to IE 9, then the following may be needed
		header('Cache-Control: max-age=1');

		// If you're serving to IE over SSL, then the following may be needed
		header('Expires: Mon, 26 Jul 1997 05:00:00 GMT'); // Date in the past
		header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT'); // always modified
		header('Cache-Control: cache, must-revalidate'); // HTTP/1.1
		header('Pragma: public'); // HTTP/1.0

		$writer = IOFactory::createWriter($this->spreadsheet, 'Xls');
		$writer->save('php://output');
		exit;
	}
	
	public function abc($col){
		$arr = [
			1 => 'A',
			2 => 'B',
			3 => 'C',
			4 => 'D',
			5 => 'E',
			6 => 'F',
			7 => 'G',
			8 => 'H',
			9 => 'I',
			10 => 'J',
			11 => 'K',
			12 => 'L',
			13 => 'M',
			14 => 'N',
			15 => 'O',
			16 => 'P',
			17 => 'Q'
		];
		
		return $arr[$col];
	}
	
	
	
}
